[{"content":"需求 将微信接龙打卡更新到考勤表中，已到的人✔，未到的人❌\n思路拆分 对比两列，一列是人员姓名（固定列），一列是此人当日打卡情况。每次微信打卡后，复制接龙到表格的对比列中，如果固定列的名字有出现在对比列中，则更新当日打卡记录。\ncells = sheet[\u0026#39;A3:A11\u0026#39;] #固定列 cells2 = sheet[\u0026#39;N3:N12\u0026#39;] #对比列 cells3 = sheet[\u0026#39;C3:C11\u0026#39;] #保存到新列，每日更新 姓名\\日期 10月5日 10月6日 张三 ✔ ✔ 李四 ❌ ✔ 王五 ✔ ✔ 使用的python包：openpyxsl模块 参考教程：https://blog.csdn.net/weixin_44288604/article/details/120731317\nimport os import openpyxl import chardet import codecs path = r\u0026#34;C:\\\\Users\\\\DELL\\\\Desktop\\\\work\u0026#34; os.chdir(path) # 修改工作路径 workbook = openpyxl.load_workbook(\u0026#39;志愿者考勤表.xlsx\u0026#39;)\t# 返回一个workbook数据类型的值 # print(workbook.sheetnames)\t# 打印Excel表中的所有表 # 选择工作表 sheet = workbook[\u0026#39;Sheet1\u0026#39;] # 获取指定sheet表 cells = sheet[\u0026#39;A3:A11\u0026#39;] #固定列 cells2 = sheet[\u0026#39;N3:N12\u0026#39;] #对比列 cells3 = sheet[\u0026#39;C3:C11\u0026#39;] #保存到新列，每日更新 for i in cells: for j in i: # 打印A3到A11的数据 # print(j.value) for k in cells2: for l in k: # 打印N3到N12的数据 # print(l.value) if(l.value != None): if(j.value.find(l.value) == -1): print(l.row) else: sheet[\u0026#34;C{}\u0026#34;.format(j.row)].value = \u0026#39;✔\u0026#39; for k in cells3: for l in k: if( sheet[\u0026#34;C{}\u0026#34;.format(l.row)].value != \u0026#39;✔\u0026#39;): print(l.row) sheet[\u0026#34;C{}\u0026#34;.format(l.row)].value = \u0026#39;×\u0026#39; workbook.save(\u0026#39;志愿者考勤表.xlsx\u0026#39;) #记得保存，否则更改不生效 需求变更 要求整张表的行列对调 日期\\姓名 张三 李四 王五 10月5日 ✔ ❌ ✔ 10月6日 ✔ ✔ ✔ import os import openpyxl import chardet import codecs path = r\u0026#34;C:\\\\Users\\\\DELL\\\\Desktop\\\\work\\\\考勤表\u0026#34; os.chdir(path) # 修改工作路径 workbook = openpyxl.load_workbook(\u0026#39;志愿者考勤表.xlsx\u0026#39;)\t# 返回一个workbook数据类型的值 # print(workbook.sheetnames)\t# 打印Excel表中的所有表 # 选择工作表 sheet = workbook[\u0026#39;Sheet1\u0026#39;] # 获取指定sheet表 alignment = openpyxl.styles.Alignment(horizontal=\u0026#34;center\u0026#34;, vertical=\u0026#34;center\u0026#34;, text_rotation=0, wrap_text=True) # 设置对齐格式 def columnletter(col): letter = [0, \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;G\u0026#39;, \u0026#39;H\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;L\u0026#39;, \u0026#39;M\u0026#39;, \u0026#39;N\u0026#39;] return letter[col] for i in sheet.iter_rows(min_row=2, max_row=2, min_col=2, max_col=10): for j in i: # 打印固定行（姓名行） # print(j.value) for k in sheet.iter_rows(min_row=16, max_row=16, min_col=1, max_col=10): for l in k: # 打印对比行（excel手动转置） # print(l.value) if(l.value != None): if(j.value.find(l.value) == -1): #print(l.column) #注意打印出来的是数字，而不是字母 else: # ----------------------- #新信息注入新行，打勾 # ----------------------------- sheet[\u0026#34;{}5\u0026#34;.format(columnletter(j.column))].value = \u0026#39;✔\u0026#39; sheet[\u0026#34;{}5\u0026#34;.format(columnletter(j.column))].alignment = alignment # ----------------------------- #新信息注入新行，打叉 # ----------------------------- for k in sheet.iter_rows(min_row=5, max_row=5, min_col=2, max_col=10): for l in k: if( sheet[\u0026#34;{}5\u0026#34;.format(columnletter(l.column))].value != \u0026#39;✔\u0026#39;): print(l.column) sheet[\u0026#34;{}5\u0026#34;.format(columnletter(l.column))].value = \u0026#39;×\u0026#39; sheet[\u0026#34;{}5\u0026#34;.format(columnletter(l.column))].alignment = alignment workbook.save(\u0026#39;志愿者考勤表.xlsx\u0026#39;) ","date":"2023-10-05T09:58:39+08:00","image":"https://morimit.github.io/2023/python-deal-with-excel/openpyxl_hu866701c10759c1e383c1833c73609b55_33637_120x120_fill_box_smart1_3.PNG","permalink":"https://morimit.github.io/2023/python-deal-with-excel/","title":"Python Deal With Excel"},{"content":"动态博客 可以进入网页后台在线编写文章、管理评论，可以实时更新 搭建时需要租用服务器 halo 不用输代码，直接生成网页，但要配置服务器：\n一台可访问公网的服务器。可购买云主机，或实体服务器。 服务器的连接与管理：SSH工具（如SecureCRT）、SFTP工具（往服务器上上传文件）。 服务器应用安装与环境部署。（部署手册也可也在这个博主账号下找）。 准备网站源码或安装包（jar包）进行部署。 防火墙开放8090端口，这是网站打开访问的端口 (xxx.xxx.xxx.xxx:8090）。 可以下载一些主题包，在控制台页面安装。 在服务器上安装nginx。一般来说我们不会用jar包启动的8090端口的服务去直面用户，而是会在中间加一层代理服务器做转发服务（负载均衡、扛并发）。常用的代理服务器是nginx。nginx默认在80端口启动web服务。 配置nginx，让它代理到jar包启动的地址（xxx.xxx.xxx.xxx:8090），即可不用写8090端口访问。修改配置文件。 在GitHub上部署halo，省去购买服务器。 Wordpress 可用docker搭建；基于PHP语言\n安装docker 搭建博客。下载docker-compose.yml文件。接着用一行命令启动博客（之前下载的yml文件里写了从docker官方仓库拉取服务镜像，包括mysql和需要的web服务）。 登录（localhost:8000），选择语言、登录账户设置，即可以看到博客后台。 可以改换主题 静态博客 利用github pages、Netlify、vercel等可以做免费托管，相当于发一个写好的package到托管网站上（比如Hugo目录中的publish文件夹），再写好自动配置程序（可以参考别人的配置模板），它就能自动把网站package发布到某个网址上。 缺点就是如果要新写文章，就要重新改好package再通过SSH同步上去。 Hugo 基于GO语言；非常快速；\nHexo 和Hugo差不多，很多主题修改后Hugo也可以用。\n","date":"2023-03-16T09:33:30+08:00","image":"https://morimit.github.io/2023/different-blog-types/hugo_hufdb59a3ab1755e5557c14674f8a0c728_59951_120x120_fill_box_smart1_3.PNG","permalink":"https://morimit.github.io/2023/different-blog-types/","title":"Different Blog Types"},{"content":"在git bash终端创建两个SSH key: ssh-keygen -t rsa -f ~/.ssh/id_rsa_m -C \u0026#34;firstmail@gmail.com\u0026#34; #绑定hugo网站源代码存放的GitHub所用的邮箱 ssh-keygen -t rsa -f ~/.ssh/id_rsa -C \u0026#34;secondmail@gmail.com\u0026#34; #绑定另一个GitHub账号的邮箱 将两个SSH公钥分别添加到对应的GitHub账号中 两个SSH key分别配置在两个GitHub账号如下的设置里。 sshkey 清空本地的SSH缓存并添加新SSH密钥到SSH agent中 在gitbash终端中输入命令：\nssh-add -D ssh-add ~/.ssh/id_rsa ssh-add ~/.ssh/id_rsa_m ssh-add -l 若提示 Could not open a connection to your authentication agent. 则先执行命令 ssh-agent bash 即可。\n在本地配置文件中设置不同账号和SSH key的对应关系 在 ~/.ssh/config 文件（没有就新建一个）中设置不同仓库指向不同的密钥文件：\n#第一个账号 Host github.com # 这里域名随意写，标识账号1 HostName github.com #这里域名就是我们要访问的远程服务器域名github.com User git #可以随意填写 IdentityFile ~/.ssh/id_rsa #私钥位置 # 第二个账号 Host second.github.com #标识账号2 HostName github.com User git PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_m 测试SSH连接是否成功 在gitbash中执行命令\nssh -T git@github.com ssh -T git@second.github.com 提示 Hi Morimit! You've successfully authenticated, but GitHub does not provide shell access 则为成功。\n到此为止参考 github-手把手教程-本地如何连接多个github仓库_Vivi_static的博客-CSDN博客_如何连接多个github仓库\n配置git 进入项目文件夹。\n# 取消全局 用户名/邮箱 配置 $ git config --global --unset user.name $ git config --global --unset user.email # 进入项目文件夹，单独设置每个repo 用户名/邮箱 $ git config user.email \u0026#34;xxxx@xx.com\u0026#34; $ git config user.name \u0026#34;xxxx\u0026#34; $ git config --list 配置远程仓库：\n$ git remote rm origin # 远程仓库地址，注意Host名称 $ git remote add origin git@second.github.com:githubUserName/repName.git $ git remote -v # 查看远程 将本地仓库上传到远程仓库 push测试：\ngit add . git commit -m \u0026#34;自行添加注释\u0026#34; git push origin main //推送 到此为止参考 Git之同一台电脑连接多个远程仓库 - zhengyan_web - 博客园 (cnblogs.com) 额外参考：本地Git仓库关联多个远程仓库的两种方法 - 知乎 (zhihu.com)\n绑定好后，新建本地仓库再连接到新远程仓库的流程总结 新建本地仓库，使用gitbash进入到项目文件夹中。 将本地仓库git初始化 git init 在本地添加远程仓库SSH地址 git remote add origin git@second.github.com:Morimit/Morimit_source.git (注意这里的账号名是 git@second.github.com 是和 ~/.ssh/config 文件中配置一致的) 配置git账号: git config user.name \u0026quot;Morimit\u0026quot; 和 git config user.email \u0026quot;firstmail@gmail.com\u0026quot; 。 添加和提交： git add . 、 git commit -m \u0026quot;Add site files\u0026quot; 推送到远程仓库： git push --set-upstream origin main ","date":"2023-01-19T00:00:00Z","image":"https://morimit.github.io/2023/connect-git-to-github/SSH_hu76ac48c9296eadc7f5b04813fe8b3453_968435_120x120_fill_box_smart1_3.PNG","permalink":"https://morimit.github.io/2023/connect-git-to-github/","title":"Connect Git to Github"},{"content":"首先Hugo能够生成可以发布的网站文件，其次使用git进行版本控制，每次修改后可以把源码传到GitHub，最后GitHub对Hugo建站有完整的支持组件（GitHub action、GitHub pages service），所以才能顺利完成一系列自动部署。\n关于 GitHub action：\nThe GitHub Action is going to grab the content from the XXX_source repository, build it using Hugo and push the output into the XXX repository\n防踩坑注意事项 如果一台电脑的git要连接两个GitHub账号，使用SSH连接方式，需要本地gitbash生成两组SSH密钥对，分别将公钥内容存入对应的GitHub账号，而在本地 ~/.ssh 文件夹下创建一个 config 文件，填写私钥的对应信息。当设置git远程仓库的时候，需要参考 config 文件中的内容。 具体参考：Connect git to GitHub GitHub Action 可以将GitHub中放置源码的仓库（source repo），通过GitHub内置的Hugo二进制文件来将源码打包生成 public 文件夹，并根据自行（在GitHub上）写入的Action脚本，（脚本中写入通过接收本地的git push来触发），通过新的SSH连接（本地生成一个新的SSH密钥对），公钥填入publish repo的 settings/Deploy ，私钥填入source repo 的settings/private key 并将此private key的名称填入Action脚本的特定位置，从而让本地的git软件将这个 public 文件夹push 到GitHub上特定的、能触发GitHub pages发布的仓库（publish repo）。具体参考：Build Hugo With GitHub Action GitHub Action的脚本中写的推送到publish repo的branch，要和此仓库设定的GitHub pages发布branch相一致。 搭建步骤 先在本地下载Hugo二进制文件，一番折腾后通过 hugo server 命令查看网站效果。 本地生成SSH密钥对，GitHub上创建源码仓库和发布仓库，发布仓库的命名必须是 xxxxx.github.io ，此命名和网站域名一致。参照 Build Hugo With GitHub Action配置好 GitHub Action 的脚本和两个仓库。 将本地项目文件夹通过 git push 命令推送到source repo，可以在 https://xxxxx.github.io 处查看网站。 最后形成的Workflow git pull 先将GitHub上的源码（如果有变动）同步到本地。 本地修改内容，若新增文件则可使用命令hugo new posts/新增内容.md，用hugo server 命令查看修改效果，如果再加上--buildDrafts可以查看草稿文件 。 git add .添加修改后的所有文件到stage area； git commit -m 'some commets' 把stage area的文件添加到workspace git push 把工作区的文件推送到GitHub的源码仓库中，在https://xxxxx.github.io 处查看发布好的网站。 ","date":"2023-01-11T20:59:31+08:00","image":"https://morimit.github.io/2023/blog-workflow/Journey2_hu3a7c6765f2e48ec02e633c4343bd6058_2950906_120x120_fill_box_smart1_3.png","permalink":"https://morimit.github.io/2023/blog-workflow/","title":"Blog Workflow"},{"content":"魔法阵 库洛牌和小樱牌 ","date":"2023-01-10T20:56:54+08:00","image":"https://morimit.github.io/life/2023/collection/Sakura_Magic_circle_hu57f378ef64b29f6b17ecf77937371d7d_135674_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://morimit.github.io/life/2023/collection/","title":"小樱卡牌"},{"content":"Prerequisite 将本地仓库推送到GitHub：[[Connect git to GitHub]]\nReference Build Hugo With GitHub Action Create and host a blog with Hugo and GitHub Pages in less than 30 minutes Creating a personal access token 基于 Github Action 自动构建 Hugo 博客 - (lixueduan.com)：讲清楚了GitHub Action中的.yml配置文件代码具体是怎样连接GitHub上的两个仓库的 折腾Hugo | GitHub Pages | Github Actions自动构建发布免费个人网站 - 知乎 (zhihu.com) ：步骤清晰，看完就能知道怎么给GitHub上的两个仓库配置公钥私钥 使用 Hugo + GitHub Actions 升级博客 // 风行\u0026rsquo;s Blog (lijingcheng.github.io) ssh-keygen 生成密钥 Log The GitHub Action is going to grab the content from the XXX_source repository, build it using Hugo and push the output into the XXX repository.\n在本地电脑中创建一个新的SSH密钥对： ssh-keygen -t rsa -b 4096 -C \u0026quot;yourmail@mail.com\u0026quot; -f ~/.ssh/gh-pages -N \u0026quot;\u0026quot; 给Github上绑定GitHub Pages的公开仓库添加公钥： ssh-pub 给Github存放网站源码的私人仓库添加私钥： ssh-private 在项目文件夹中新建一个文件 .github/workflows/gh-pages.yml： 添加下面脚本内容： name: Deploy Hugo Site to Github Pages on Main Branch on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 # v2 does not have submodules option now # with: # submodules: true - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} # 这里的 ACTIONS_DEPLOY_KEY 则是上面设置 Private Key的变量名 external_repository: Morimit/Morimit.github.io # Pages绑定的远程仓库 publish_dir: \u0026#34;./public\u0026#34; keep_files: false # remove existing files publish_branch: main # deploying branch commit_message: ${{ github.event.head_commit.message }} 上面的步骤完成后，每次从本地git push源文件到GitHub都会触发GitHub action把publish文件夹更新到GitHub pages。 搭建完成后的workflow workflow\n","date":"2023-01-10T00:00:00Z","image":"https://morimit.github.io/2023/blog-build-with-github-action/actions_hu03a58e8a8f7ee10093a426c7be209910_110343_120x120_fill_box_smart1_3.PNG","permalink":"https://morimit.github.io/2023/blog-build-with-github-action/","title":"Blog Build With GitHub Action"},{"content":"References Hugo Docs: A very brief and useful quick start, didn\u0026rsquo;t spent too much time. Hugo tutorial by CloudCannon: Got a roughly picture of the file hierarchy of Hugo. Build Websites with Hugo: A complete guide to work with Hugo, got a clue to change the /themes and other files. Hugo In Action Hugo-stack-theme 主题魔改版 不是从零开始的 Hugo 建站笔记 Create and host a blog with Hugo and GitHub Pages in less than 30 minutes Hugo | 在文章中插入轮播图片 Log 2023.1.15 Added the My Life section (extract from categories section). 2023.1.14 Added imgloop. 2023.1.10 Signed up a new GitHub account, created a public repo automatically linked with GitHub Pages, and a another private repo ready to hold site source files. Conneted git with different GitHub accounts (SSH). Create a brand new SSH key in the local file ~/.ssh/, and configurated GitHub Action. 2023.1.9 Changed the sidebar image, footer and theme color. Deleted the categories and search in the left sidebar. ","date":"2023-01-09T13:50:03+08:00","image":"https://morimit.github.io/2023/blog-building-logs/Journey_hu1d161e49501ed6cf448ab5500d479d0f_4442675_120x120_fill_box_smart1_3.png","permalink":"https://morimit.github.io/2023/blog-building-logs/","title":"Blog Building Logs"}]